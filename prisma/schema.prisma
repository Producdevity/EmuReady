generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
  // User roles in order of increasing permissions
  USER
  AUTHOR
  DEVELOPER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum CustomFieldType {
  TEXT
  TEXTAREA
  URL
  BOOLEAN
  SELECT
  RANGE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PcOs {
  WINDOWS
  LINUX
  MACOS
}

enum TailwindColor {
  yellow
  lime
  green
  emerald
  teal
  cyan
  sky
  blue
  indigo
  violet
  purple
  fuchsia
  pink
  rose
  slate
  gray
  zinc
  neutral
  stone
}

enum PermissionCategory {
  CONTENT
  MODERATION
  USER_MANAGEMENT
  SYSTEM
}

model User {
  id                   String      @id @default(uuid())
  clerkId              String      @unique
  email                String      @unique
  name                 String?
  bio                  String?
  profileImage         String?
  role                 Role        @default(USER)
  createdAt            DateTime    @default(now())
  // Trust system fields
  trustScore           Int         @default(0)
  lastActiveAt         DateTime    @default(now())
  // User preferences
  defaultToUserDevices Boolean     @default(false)
  defaultToUserSocs    Boolean     @default(false)
  notifyOnNewListings  Boolean     @default(true)
  showNsfw            Boolean     @default(false)
  lastUsedDeviceId     String?     // Track the last used device
  // Relations
  comments             Comment[]
  listings             Listing[]
  pcListings           PcListing[]
  processedListings    Listing[]   @relation("ListingsProcessedByAdmin")
  processedPcListings  PcListing[] @relation("PcListingsProcessedByAdmin")
  submittedGames       Game[]      @relation("GamesSubmittedByUser")
  approvedGames        Game[]      @relation("GamesApprovedByAdmin")
  votes                Vote[]
  commentVotes                CommentVote[]
  pcListingVotes              PcListingVote[]
  pcListingComments           PcListingComment[]
  pcListingCommentVotes       PcListingCommentVote[]
  devicePreferences           UserDevicePreference[]
  socPreferences              UserSocPreference[]
  pcPresets                   UserPcPreset[]
  notifications               Notification[]
  notificationPreferences     NotificationPreference[]
  listingNotificationPrefs    ListingNotificationPreference[]
  pcListingNotificationPrefs  PcListingNotificationPreference[]
  triggeredNotificationEvents NotificationEvent[]
  trustActionLogs             TrustActionLog[]
  // Verified developer relations
  verifiedDeveloperFor        VerifiedDeveloper[] @relation("UserVerifiedDeveloper")
  verifiedDeveloperBy         VerifiedDeveloper[] @relation("VerifiedBy")
  developerVerifications      ListingDeveloperVerification[]
  pcDeveloperVerifications    PcListingDeveloperVerification[]
  // Permission system relations
  assignedRolePermissions     RolePermission[]
  permissionActionLogs        PermissionActionLog[]
  // Report and ban system relations
  reportsSubmitted            ListingReport[]  @relation("UserReports")
  reportsReviewed             ListingReport[]  @relation("ReportsReviewed")
  pcReportsSubmitted          PcListingReport[] @relation("UserPcReports")
  pcReportsReviewed           PcListingReport[] @relation("PcReportsReviewed")
  userBans                    UserBan[]        @relation("UserBans")
  bansCreated                 UserBan[]        @relation("BansCreated")
  bansLifted                  UserBan[]        @relation("BansLifted")
  // Badge system relations
  userBadges                  UserBadge[]
  badgesCreated               Badge[]          @relation("BadgesCreatedBy")
  badgeAssignments            UserBadge[]      @relation("BadgeAssignments")
}

model UserDevicePreference {
  id        String @id  @default(uuid())
  userId    String
  deviceId  String
  createdAt DateTime    @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  device    Device      @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId])
}

model UserSocPreference {
  id     String @id @default(cuid())
  userId String
  socId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  soc  SoC  @relation(fields: [socId], references: [id], onDelete: Cascade)

  @@unique([userId, socId])
  @@map("user_soc_preferences")
}

model DeviceBrand {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  devices   Device[]
  cpus      Cpu[]
  gpus      Gpu[]
}

model SoC {
  id           String   @id @default(uuid())
  name         String   @unique
  manufacturer String
  architecture String?  // e.g., "ARM64", "x86_64"
  processNode  String?  // e.g., "5nm", "7nm"
  cpuCores     Int?
  gpuModel     String?
  createdAt    DateTime @default(now())
  devices      Device[]
  userPreferences UserSocPreference[]
}

model Device {
  id        String      @id @default(uuid())
  brandId   String
  modelName String
  socId     String?
  brand     DeviceBrand @relation(fields: [brandId], references: [id])
  soc       SoC?        @relation(fields: [socId], references: [id])
  listings  Listing[]
  userPreferences UserDevicePreference[]

  @@unique([brandId, modelName])
}

model System {
  id             String  @id @default(uuid())
  name           String  @unique
  key            String? @unique
  tgdbPlatformId Int?    // TheGamesDB platform ID for image searching
  games          Game[]
  emulators      Emulator[]
}

model Game {
  id          String         @id @default(uuid())
  title       String
  systemId    String
  imageUrl    String?        // Fallback image URL
  boxartUrl   String?        // TGDB boxart image URL
  bannerUrl   String?        // TGDB banner image URL
  tgdbGameId  Int?           // TheGamesDB game ID for reliable duplicate detection
  ageRating   String?
  isErotic    Boolean        @default(false)
  status      ApprovalStatus @default(APPROVED) // Existing games are auto-approved
  submittedBy String?                     // null for existing games, userId for new submissions
  submittedAt DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime       @default(now())
  system      System         @relation(fields: [systemId], references: [id])
  listings    Listing[]
  pcListings  PcListing[]
  submitter   User?          @relation("GamesSubmittedByUser", fields: [submittedBy], references: [id])
  approver    User?          @relation("GamesApprovedByAdmin", fields: [approvedBy], references: [id])

  @@unique([title, systemId])
  @@index([status])
  @@index([submittedBy])
  @@index([submittedAt])
  @@index([status, submittedAt])
  @@index([systemId, status])
  @@index([tgdbGameId])
}

model CustomFieldDefinition {
  id           String            @id @default(uuid())
  emulatorId   String
  name         String // Internal name, e.g., "driver_version"
  label        String // UI display label, e.g., "Driver Version"
  type         CustomFieldType
  options      Json? // For SELECT type: [{ value: "v1", label: "Version 1" }, { value: "v2", label: "Version 2" }]
  defaultValue Json? // Default value for the field (boolean: true/false, select: option value, text: string)
  placeholder  String? // Placeholder text for TEXT fields
  // Range-specific fields
  rangeMin     Float? // Minimum value for RANGE type
  rangeMax     Float? // Maximum value for RANGE type
  rangeUnit    String? // Unit for RANGE type (e.g., "%", "GB", "MB")
  rangeDecimals Int? // Number of decimal places for RANGE type (0 for integers, 1 for one decimal)
  isRequired   Boolean           @default(false)
  displayOrder Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  emulator     Emulator          @relation(fields: [emulatorId], references: [id])
  listingValues ListingCustomFieldValue[]
  pcListingValues PcListingCustomFieldValue[]

  @@unique([emulatorId, name])
  @@index([emulatorId])
}

model CustomFieldTemplate {
  id          String                     @id @default(uuid())
  name        String                     @unique
  description String?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  fields      CustomFieldTemplateField[]
}

model CustomFieldTemplateField {
  id           String              @id @default(uuid())
  templateId   String
  name         String              // Internal name, e.g., "driver_version"
  label        String              // UI display label, e.g., "Driver Version"
  type         CustomFieldType
  options      Json?               // For SELECT type: [{ value: "v1", label: "Version 1" }, { value: "v2", label: "Version 2" }]
  defaultValue Json?               // Default value for the field (boolean: true/false, select: option value, text: string)
  placeholder  String?             // Placeholder text for TEXT fields
  // Range-specific fields
  rangeMin     Float?              // Minimum value for RANGE type
  rangeMax     Float?              // Maximum value for RANGE type
  rangeUnit    String?             // Unit for RANGE type (e.g., "%", "GB", "MB")
  rangeDecimals Int?               // Number of decimal places for RANGE type (0 for integers, 1 for one decimal)
  isRequired   Boolean             @default(false)
  displayOrder Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  template     CustomFieldTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, name])
  @@index([templateId])
}

model Emulator {
  id                    String                  @id @default(uuid())
  name                  String                  @unique
  logo                  String?                 // Logo filename (e.g., "aethersx2.png")
  description           String?                 // Markdown description/notes
  repositoryUrl         String?                 // Repository/source code URL
  officialUrl           String?                 // Official website URL
  listings              Listing[]
  pcListings            PcListing[]
  customFieldDefinitions CustomFieldDefinition[]
  systems               System[]
  verifiedDevelopers    VerifiedDeveloper[]
}

model PerformanceScale {
  id          Int       @id @default(autoincrement())
  label       String    @unique
  rank        Int
  description String?
  listings    Listing[]
  pcListings  PcListing[]
}

model Listing {
  id              String                 @id @default(uuid())
  deviceId        String
  gameId          String
  emulatorId      String
  performanceId   Int
  notes           String?
  authorId        String
  createdAt       DateTime               @default(now())
  status          ApprovalStatus  @default(PENDING)
  processedAt     DateTime?
  processedNotes  String?
  processedByUserId String?

  author          User                   @relation(fields: [authorId], references: [id])
  processedByUser User?                  @relation("ListingsProcessedByAdmin", fields: [processedByUserId], references: [id])
  performance     PerformanceScale       @relation(fields: [performanceId], references: [id])
  emulator        Emulator               @relation(fields: [emulatorId], references: [id])
  game            Game                   @relation(fields: [gameId], references: [id])
  device          Device                 @relation(fields: [deviceId], references: [id])
  comments              Comment[]
  votes                 Vote[]
  customFieldValues     ListingCustomFieldValue[]
  notificationPrefs     ListingNotificationPreference[]
  developerVerifications ListingDeveloperVerification[]
  reports               ListingReport[]

  @@index([processedByUserId])
}

model Vote {
  id        String  @id @default(uuid())
  value     Boolean
  userId    String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  userId    String
  listingId String
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  isEdited  Boolean       @default(false)
  parent    Comment?      @relation("Thread", fields: [parentId], references: [id])
  replies   Comment[]     @relation("Thread")
  listing   Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     CommentVote[]
  score     Int           @default(0)
}

model CommentVote {
  id        String   @id @default(uuid())
  value     Boolean // true = upvote, false = downvote
  userId    String
  commentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ListingCustomFieldValue {
  id                      String                @id @default(uuid())
  listingId               String
  customFieldDefinitionId String
  value                   Json
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  listing                 Listing               @relation(fields: [listingId], references: [id], onDelete: Cascade)
  customFieldDefinition   CustomFieldDefinition @relation(fields: [customFieldDefinitionId], references: [id], onDelete: Cascade)

  @@unique([listingId, customFieldDefinitionId])
  @@index([listingId])
  @@index([customFieldDefinitionId])
}

// Notification System Models
model Notification {
  id              String                 @id @default(cuid())
  userId          String
  type            NotificationType
  category        NotificationCategory
  title           String                 @db.VarChar(255)
  message         String                 @db.Text
  actionUrl       String?
  metadata        Json?
  isRead          Boolean                @default(false)
  deliveryChannel DeliveryChannel        @default(IN_APP)
  deliveryStatus  NotificationDeliveryStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id           String           @id @default(cuid())
  userId       String
  type         NotificationType
  inAppEnabled Boolean          @default(true)
  emailEnabled Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("notification_preferences")
}

model ListingNotificationPreference {
  id        String  @id @default(cuid())
  userId    String
  listingId String
  isEnabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("listing_notification_preferences")
}

model NotificationEvent {
  id           String    @id @default(cuid())
  eventType    String
  entityType   String
  entityId     String
  triggeredBy  String?
  payload      Json?
  processedAt  DateTime?

  createdAt DateTime @default(now())

  triggeredByUser User? @relation(fields: [triggeredBy], references: [id], onDelete: SetNull)

  @@index([eventType, createdAt])
  @@index([entityType, entityId])
  @@map("notification_events")
}

// Notification Enums
enum NotificationType {
  // Engagement notifications
  LISTING_COMMENT
  LISTING_VOTE_UP
  LISTING_VOTE_DOWN
  COMMENT_REPLY
  USER_MENTION

  // Content notifications
  NEW_DEVICE_LISTING
  NEW_SOC_LISTING
  GAME_ADDED
  EMULATOR_UPDATED

  // System notifications
  MAINTENANCE_NOTICE
  FEATURE_ANNOUNCEMENT
  POLICY_UPDATE

  // Moderation notifications
  LISTING_APPROVED
  LISTING_REJECTED
  CONTENT_FLAGGED
  ACCOUNT_WARNING
  ROLE_CHANGED

  @@map("notification_type")
}

enum NotificationCategory {
  ENGAGEMENT
  CONTENT
  SYSTEM
  MODERATION

  @@map("notification_category")
}

enum DeliveryChannel {
  IN_APP
  EMAIL
  BOTH

  @@map("delivery_channel")
}

enum NotificationDeliveryStatus {
  PENDING
  SENT
  FAILED

  @@map("notification_delivery_status")
}

// Trust System Enums and Models
enum TrustAction {
  UPVOTE
  DOWNVOTE
  LISTING_CREATED
  LISTING_APPROVED
  LISTING_REJECTED
  MONTHLY_ACTIVE_BONUS
  LISTING_RECEIVED_UPVOTE
  LISTING_RECEIVED_DOWNVOTE
  ADMIN_ADJUSTMENT_POSITIVE
  ADMIN_ADJUSTMENT_NEGATIVE

  @@map("trust_action")
}

model TrustActionLog {
  id        String      @id @default(uuid())
  userId    String
  action    TrustAction
  weight    Int
  metadata  Json?       // Additional context like listingId, targetUserId, etc.
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@map("trust_action_logs")
}

// Permission System Models
model Permission {
  id          String           @id @default(uuid())
  key         String           @unique // Unique identifier like "approve_listings"
  label       String           // Display name like "Approve Listings"
  description String?          // Detailed explanation of what this permission does
  category    PermissionCategory? // Category like "CONTENT", "USER_MANAGEMENT", "SYSTEM"
  isSystem    Boolean          @default(false) // System permissions that cannot be deleted
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  rolePermissions RolePermission[]
  actionLogs     PermissionActionLog[]

  @@index([category])
  @@index([isSystem])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role
  permissionId String
  assignedBy   String?    // UserId who assigned this permission
  assignedAt   DateTime   @default(now())
  
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedByUser User?    @relation(fields: [assignedBy], references: [id], onDelete: SetNull)

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
  @@map("role_permissions")
}

model PermissionActionLog {
  id           String                   @id @default(uuid())
  userId       String
  action       PermissionActionType
  targetRole   Role?                   // For role-permission assignments
  permissionId String?                 // For permission-related actions
  metadata     Json?                   // Additional context (old values, etc.)
  createdAt    DateTime                @default(now())
  
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission?             @relation(fields: [permissionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([targetRole])
  @@index([permissionId])
  @@map("permission_action_logs")
}

enum PermissionActionType {
  PERMISSION_CREATED
  PERMISSION_UPDATED
  PERMISSION_DELETED
  ROLE_PERMISSION_ASSIGNED
  ROLE_PERMISSION_REMOVED
  USER_ROLE_CHANGED
  
  @@map("permission_action_type")
}

model VerifiedDeveloper {
  id          String   @id @default(uuid())
  userId      String
  emulatorId  String
  verifiedAt  DateTime @default(now())
  verifiedBy  String
  notes       String?
  
  user        User     @relation("UserVerifiedDeveloper", fields: [userId], references: [id], onDelete: Cascade)
  emulator    Emulator @relation(fields: [emulatorId], references: [id], onDelete: Cascade)
  verifier    User     @relation("VerifiedBy", fields: [verifiedBy], references: [id])
  
  @@unique([userId, emulatorId])
  @@index([userId])
  @@index([emulatorId])
  @@map("verified_developers")
}

model ListingDeveloperVerification {
  id          String   @id @default(uuid())
  listingId   String
  verifiedBy  String
  verifiedAt  DateTime @default(now())
  notes       String?
  
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  developer   User     @relation(fields: [verifiedBy], references: [id], onDelete: Cascade)
  
  @@unique([listingId, verifiedBy])
  @@index([listingId])
  @@index([verifiedBy])
  @@map("listing_developer_verifications")
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  SPAM
  MISLEADING_INFORMATION
  FAKE_LISTING
  COPYRIGHT_VIOLATION
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

model ListingReport {
  id              String       @id @default(uuid())
  listingId       String
  reportedById    String
  reason          ReportReason
  description     String?
  status          ReportStatus @default(PENDING)
  reviewedById    String?
  reviewedAt      DateTime?
  reviewNotes     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  listing         Listing      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reportedBy      User         @relation("UserReports", fields: [reportedById], references: [id], onDelete: Cascade)
  reviewedBy      User?        @relation("ReportsReviewed", fields: [reviewedById], references: [id])
  
  @@unique([listingId, reportedById])
  @@index([listingId])
  @@index([reportedById])
  @@index([reviewedById])
  @@index([status])
  @@index([createdAt])
  @@map("listing_reports")
}

model UserBan {
  id           String    @id @default(uuid())
  userId       String
  bannedById   String
  reason       String
  notes        String?
  isActive     Boolean   @default(true)
  bannedAt     DateTime  @default(now())
  expiresAt    DateTime?
  unbannedAt   DateTime?
  unbannedById String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User      @relation("UserBans", fields: [userId], references: [id], onDelete: Cascade)
  bannedBy     User      @relation("BansCreated", fields: [bannedById], references: [id])
  unbannedBy   User?     @relation("BansLifted", fields: [unbannedById], references: [id])
  
  @@index([userId])
  @@index([bannedById])
  @@index([isActive])
  @@index([bannedAt])
  @@index([expiresAt])
  @@map("user_bans")
}

model UserPcPreset {
  id        String @id @default(uuid())
  userId    String
  name      String
  cpuId     String
  gpuId     String?  // Optional for integrated graphics
  memorySize Int    // in GB
  os        PcOs
  osVersion String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cpu  Cpu  @relation(fields: [cpuId], references: [id])
  gpu  Gpu?  @relation(fields: [gpuId], references: [id])

  @@unique([userId, name])
  @@index([userId])
  @@map("user_pc_presets")
}

model Cpu {
  id        String      @id @default(uuid())
  brandId   String
  modelName String
  createdAt DateTime    @default(now())
  brand     DeviceBrand @relation(fields: [brandId], references: [id])
  pcListings PcListing[]
  presets   UserPcPreset[]

  @@unique([brandId, modelName])
  @@index([brandId])
  @@map("cpus")
}

model Gpu {
  id        String      @id @default(uuid())
  brandId   String
  modelName String
  createdAt DateTime    @default(now())
  brand     DeviceBrand @relation(fields: [brandId], references: [id])
  pcListings PcListing[]
  presets   UserPcPreset[]

  @@unique([brandId, modelName])
  @@index([brandId])
  @@map("gpus")
}

model PcListing {
  id              String   @id @default(uuid())
  gameId          String
  emulatorId      String
  performanceId   Int
  notes           String?
  authorId        String
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  status          ApprovalStatus  @default(PENDING)
  processedAt     DateTime?
  processedNotes  String?
  processedByUserId String?
  memorySize      Int  // in GB
  cpuId           String
  gpuId           String?  // Optional for integrated graphics
  os              PcOs
  osVersion       String

  author          User                   @relation(fields: [authorId], references: [id])
  processedByUser User?                  @relation("PcListingsProcessedByAdmin", fields: [processedByUserId], references: [id])
  performance     PerformanceScale       @relation(fields: [performanceId], references: [id])
  emulator        Emulator               @relation(fields: [emulatorId], references: [id])
  game            Game                   @relation(fields: [gameId], references: [id])
  gpu             Gpu?                   @relation(fields: [gpuId], references: [id])
  cpu             Cpu                    @relation(fields: [cpuId], references: [id])

  customFieldValues     PcListingCustomFieldValue[]
  notificationPrefs     PcListingNotificationPreference[]
  developerVerifications PcListingDeveloperVerification[]
  reports               PcListingReport[]
  votes                 PcListingVote[]
  comments              PcListingComment[]

  @@index([processedByUserId])
  @@index([status])
  @@index([gameId])
  @@index([emulatorId])
  @@index([cpuId])
  @@index([gpuId])
  @@index([authorId])
  @@map("pc_listings")
}

model PcListingCustomFieldValue {
  id                      String                @id @default(uuid())
  pcListingId             String
  customFieldDefinitionId String
  value                   Json
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  pcListing               PcListing             @relation(fields: [pcListingId], references: [id], onDelete: Cascade)
  customFieldDefinition   CustomFieldDefinition @relation(fields: [customFieldDefinitionId], references: [id], onDelete: Cascade)

  @@unique([pcListingId, customFieldDefinitionId])
  @@index([pcListingId])
  @@index([customFieldDefinitionId])
  @@map("pc_listing_custom_field_values")
}

model PcListingNotificationPreference {
  id          String    @id @default(cuid())
  userId      String
  pcListingId String
  isEnabled   Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pcListing PcListing @relation(fields: [pcListingId], references: [id], onDelete: Cascade)

  @@unique([userId, pcListingId])
  @@map("pc_listing_notification_preferences")
}

model PcListingDeveloperVerification {
  id          String   @id @default(uuid())
  pcListingId String
  verifiedBy  String
  verifiedAt  DateTime @default(now())
  notes       String?
  
  pcListing   PcListing @relation(fields: [pcListingId], references: [id], onDelete: Cascade)
  developer   User      @relation(fields: [verifiedBy], references: [id], onDelete: Cascade)
  
  @@unique([pcListingId, verifiedBy])
  @@index([pcListingId])
  @@index([verifiedBy])
  @@map("pc_listing_developer_verifications")
}

model PcListingReport {
  id              String       @id @default(uuid())
  pcListingId     String
  reportedById    String
  reason          ReportReason
  description     String?
  status          ReportStatus @default(PENDING)
  reviewedById    String?
  reviewedAt      DateTime?
  reviewNotes     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  pcListing       PcListing    @relation(fields: [pcListingId], references: [id], onDelete: Cascade)
  reportedBy      User         @relation("UserPcReports", fields: [reportedById], references: [id], onDelete: Cascade)
  reviewedBy      User?        @relation("PcReportsReviewed", fields: [reviewedById], references: [id])
  
  @@unique([pcListingId, reportedById])
  @@index([pcListingId])
  @@index([reportedById])
  @@index([reviewedById])
  @@index([status])
  @@index([createdAt])
  @@map("pc_listing_reports")
}

model PcListingVote {
  id          String    @id @default(uuid())
  value       Boolean   // true = upvote, false = downvote
  userId      String
  pcListingId String
  createdAt   DateTime  @default(now())
  
  pcListing   PcListing @relation(fields: [pcListingId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, pcListingId])
  @@index([pcListingId])
  @@index([userId])
  @@map("pc_listing_votes")
}

model PcListingComment {
  id          String               @id @default(uuid())
  content     String
  userId      String
  pcListingId String
  parentId    String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?
  isEdited    Boolean              @default(false)
  score       Int                  @default(0)
  
  parent      PcListingComment?    @relation("PcCommentThread", fields: [parentId], references: [id])
  replies     PcListingComment[]   @relation("PcCommentThread")
  pcListing   PcListing            @relation(fields: [pcListingId], references: [id], onDelete: Cascade)
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes       PcListingCommentVote[]
  
  @@index([pcListingId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@map("pc_listing_comments")
}

model PcListingCommentVote {
  id        String           @id @default(uuid())
  value     Boolean          // true = upvote, false = downvote
  userId    String
  commentId String
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   PcListingComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId])
  @@index([commentId])
  @@index([userId])
  @@map("pc_listing_comment_votes")
}

// Badge System Models
model Badge {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  color       String    @default("#3B82F6") // Default blue color
  icon        String?   // Icon name or path
  isActive    Boolean   @default(true)
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creator     User        @relation("BadgesCreatedBy", fields: [createdBy], references: [id])
  userBadges  UserBadge[]

  @@index([isActive])
  @@index([createdBy])
  @@index([createdAt])
  @@map("badges")
}

model UserBadge {
  id         String        @id @default(uuid())
  userId     String
  badgeId    String
  assignedBy String
  assignedAt DateTime      @default(now())
  notes      String?
  color      TailwindColor @default(blue)

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  assignedByUser User @relation("BadgeAssignments", fields: [assignedBy], references: [id])

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([assignedBy])
  @@index([assignedAt])
  @@map("user_badges")
}
