generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
  USER
  AUTHOR
  ADMIN
  SUPER_ADMIN
}

enum CustomFieldType {
  TEXT
  TEXTAREA
  URL
  BOOLEAN
  SELECT
}

enum ListingApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id             String            @id @default(uuid())
  email          String            @unique
  hashedPassword String
  name           String?
  profileImage   String?
  role           Role              @default(USER)
  createdAt      DateTime          @default(now())
  comments       Comment[]
  listings       Listing[]
  processedListings Listing[] @relation("ListingsProcessedByAdmin")
  votes          Vote[]
  commentVotes   CommentVote[]
}

model DeviceBrand {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  devices   Device[]
}

model Device {
  id        String      @id @default(uuid())
  brandId   String
  modelName String
  brand     DeviceBrand @relation(fields: [brandId], references: [id])
  listings  Listing[]

  @@unique([brandId, modelName])
}

model System {
  id    String @id @default(uuid())
  name  String @unique
  games Game[]
  emulators Emulator[]
}

model Game {
  id       String    @id @default(uuid())
  title    String
  systemId String
  imageUrl String?
  system   System    @relation(fields: [systemId], references: [id])
  listings Listing[]

  @@unique([title, systemId])
}

model CustomFieldDefinition {
  id           String            @id @default(uuid())
  emulatorId   String
  name         String // Internal name, e.g., "driver_version"
  label        String // UI display label, e.g., "Driver Version"
  type         CustomFieldType
  options      Json? // For SELECT type: [{ value: "v1", label: "Version 1" }, { value: "v2", label: "Version 2" }]
  isRequired   Boolean           @default(false)
  displayOrder Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  emulator     Emulator          @relation(fields: [emulatorId], references: [id])
  listingValues ListingCustomFieldValue[]

  @@unique([emulatorId, name])
  @@index([emulatorId])
}

model Emulator {
  id                    String                  @id @default(uuid())
  name                  String                  @unique
  listings              Listing[]
  customFieldDefinitions CustomFieldDefinition[]
  systems               System[]
}

model PerformanceScale {
  id          Int       @id @default(autoincrement())
  label       String    @unique
  rank        Int
  description String?
  listings    Listing[]
}

model Listing {
  id              String                 @id @default(uuid())
  deviceId        String
  gameId          String
  emulatorId      String
  performanceId   Int
  notes           String?
  authorId        String
  createdAt       DateTime               @default(now())
  status          ListingApprovalStatus  @default(PENDING)
  processedAt     DateTime?
  processedNotes  String?
  processedByUserId String?
  
  author          User                   @relation(fields: [authorId], references: [id])
  processedByUser User?                  @relation("ListingsProcessedByAdmin", fields: [processedByUserId], references: [id])
  performance     PerformanceScale       @relation(fields: [performanceId], references: [id])
  emulator        Emulator               @relation(fields: [emulatorId], references: [id])
  game            Game                   @relation(fields: [gameId], references: [id])
  device          Device                 @relation(fields: [deviceId], references: [id])
  comments        Comment[]
  votes           Vote[]
  customFieldValues ListingCustomFieldValue[]

  @@unique([gameId, deviceId, emulatorId])
  @@index([processedByUserId])
}

model Vote {
  id        String  @id @default(uuid())
  value     Boolean
  userId    String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  userId    String
  listingId String
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  isEdited  Boolean       @default(false)
  parent    Comment?      @relation("Thread", fields: [parentId], references: [id])
  replies   Comment[]     @relation("Thread")
  listing   Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     CommentVote[]
  score     Int           @default(0)
}

model CommentVote {
  id        String   @id @default(uuid())
  value     Boolean // true = upvote, false = downvote
  userId    String
  commentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ListingCustomFieldValue {
  id                      String                @id @default(uuid())
  listingId               String
  customFieldDefinitionId String
  value                   Json
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  listing                 Listing               @relation(fields: [listingId], references: [id], onDelete: Cascade)
  customFieldDefinition   CustomFieldDefinition @relation(fields: [customFieldDefinitionId], references: [id], onDelete: Cascade)

  @@unique([listingId, customFieldDefinitionId])
  @@index([listingId])
  @@index([customFieldDefinitionId])
}
