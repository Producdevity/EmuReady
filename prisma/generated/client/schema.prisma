// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String            @id @default(uuid())
  email          String            @unique
  hashedPassword String
  name           String?
  profileImage   String? // URL to the profile image (can be null)
  role           Role              @default(USER)
  listings       Listing[]
  votes          Vote[]
  comments       Comment[]
  createdAt      DateTime          @default(now())
  approvalsGiven ListingApproval[] @relation("ApprovalsGiven")
}

enum Role {
  USER // can only vote and comment
  AUTHOR // can create listings
  ADMIN // full access
  SUPER_ADMIN // full super access
}

model Device {
  id        String    @id @default(uuid())
  brand     String
  modelName String
  listings  Listing[]

  @@unique([brand, modelName])
}

model System {
  id    String @id @default(uuid())
  name  String @unique
  games Game[]
}

model Game {
  id       String    @id @default(uuid())
  title    String
  systemId String
  system   System    @relation(fields: [systemId], references: [id])
  imageUrl String? // URL to the image (can be null)
  listings Listing[]
}

model Emulator {
  id       String    @id @default(uuid())
  name     String    @unique
  listings Listing[]
}

model PerformanceScale {
  id          Int       @id @default(autoincrement())
  label       String    @unique // e.g. Playable, Slow, Unplayable
  rank        Int // higher rank is better
  description String?
  listings    Listing[]
}

model Listing {
  id            String            @id @default(uuid())
  deviceId      String
  device        Device            @relation(fields: [deviceId], references: [id])
  gameId        String
  game          Game              @relation(fields: [gameId], references: [id])
  emulatorId    String
  emulator      Emulator          @relation(fields: [emulatorId], references: [id])
  performanceId Int
  performance   PerformanceScale  @relation(fields: [performanceId], references: [id])
  notes         String?
  authorId      String
  author        User              @relation(fields: [authorId], references: [id])
  votes         Vote[]
  comments      Comment[]
  createdAt     DateTime          @default(now())
  approvals     ListingApproval[]
}

model Vote {
  id        String  @id @default(uuid())
  value     Boolean // true = thumbs up
  userId    String
  listingId String
  user      User    @relation(fields: [userId], references: [id])
  listing   Listing @relation(fields: [listingId], references: [id])

  @@unique([userId, listingId]) // one vote per user per listing
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  userId    String
  listingId String
  parentId  String?
  user      User      @relation(fields: [userId], references: [id])
  listing   Listing   @relation(fields: [listingId], references: [id])
  parent    Comment?  @relation("Thread", fields: [parentId], references: [id])
  replies   Comment[] @relation("Thread")
  createdAt DateTime  @default(now())
}

model ListingApproval {
  id             String         @id @default(uuid())
  listingId      String
  listing        Listing        @relation(fields: [listingId], references: [id])
  approvedById   String
  approvedBy     User           @relation("ApprovalsGiven", fields: [approvedById], references: [id])
  approvedByRole Role
  approvedAt     DateTime       @default(now())
  status         ApprovalStatus
  notes          String?
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
