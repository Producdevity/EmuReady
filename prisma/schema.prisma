generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Role {
  USER
  AUTHOR
  ADMIN
  SUPER_ADMIN
}

enum CustomFieldType {
  TEXT
  TEXTAREA
  URL
  BOOLEAN
  SELECT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                   String      @id @default(uuid())
  clerkId              String      @unique
  email                String      @unique
  name                 String?
  bio                  String?
  profileImage         String?
  role                 Role        @default(USER)
  createdAt            DateTime    @default(now())
  // User preferences
  defaultToUserDevices Boolean     @default(false)
  defaultToUserSocs    Boolean     @default(false)
  notifyOnNewListings  Boolean     @default(true)
  // Relations
  comments             Comment[]
  listings             Listing[]
  processedListings    Listing[]   @relation("ListingsProcessedByAdmin")
  submittedGames       Game[]      @relation("GamesSubmittedByUser")
  approvedGames        Game[]      @relation("GamesApprovedByAdmin")
  votes                Vote[]
  commentVotes                CommentVote[]
  devicePreferences           UserDevicePreference[]
  socPreferences              UserSocPreference[]
  notifications               Notification[]
  notificationPreferences     NotificationPreference[]
  listingNotificationPrefs    ListingNotificationPreference[]
  triggeredNotificationEvents NotificationEvent[]
}

model UserDevicePreference {
  id        String @id  @default(uuid())
  userId    String
  deviceId  String
  createdAt DateTime    @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  device    Device      @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId])
}

model UserSocPreference {
  id     String @id @default(cuid())
  userId String
  socId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  soc  SoC  @relation(fields: [socId], references: [id], onDelete: Cascade)

  @@unique([userId, socId])
  @@map("user_soc_preferences")
}

model DeviceBrand {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  devices   Device[]
}

model SoC {
  id           String   @id @default(uuid())
  name         String   @unique
  manufacturer String
  architecture String?  // e.g., "ARM64", "x86_64"
  processNode  String?  // e.g., "5nm", "7nm"
  cpuCores     Int?
  gpuModel     String?
  createdAt    DateTime @default(now())
  devices      Device[]
  userPreferences UserSocPreference[]
}

model Device {
  id        String      @id @default(uuid())
  brandId   String
  modelName String
  socId     String?
  brand     DeviceBrand @relation(fields: [brandId], references: [id])
  soc       SoC?        @relation(fields: [socId], references: [id])
  listings  Listing[]
  userPreferences UserDevicePreference[]

  @@unique([brandId, modelName])
}

model System {
  id             String  @id @default(uuid())
  name           String  @unique
  key            String? @unique
  tgdbPlatformId Int?    // TheGamesDB platform ID for image searching
  games          Game[]
  emulators      Emulator[]
}

model Game {
  id          String         @id @default(uuid())
  title       String
  systemId    String
  imageUrl    String?        // Fallback image URL
  boxartUrl   String?        // TGDB boxart image URL
  bannerUrl   String?        // TGDB banner image URL
  tgdbGameId  Int?           // TheGamesDB game ID for reliable duplicate detection
  status      ApprovalStatus @default(APPROVED) // Existing games are auto-approved
  submittedBy String?                     // null for existing games, userId for new submissions
  submittedAt DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime       @default(now())
  system      System         @relation(fields: [systemId], references: [id])
  listings    Listing[]
  submitter   User?          @relation("GamesSubmittedByUser", fields: [submittedBy], references: [id])
  approver    User?          @relation("GamesApprovedByAdmin", fields: [approvedBy], references: [id])

  @@unique([title, systemId])
  @@index([status])
  @@index([submittedBy])
  @@index([submittedAt])
  @@index([status, submittedAt])
  @@index([systemId, status])
  @@index([tgdbGameId])
}

model CustomFieldDefinition {
  id           String            @id @default(uuid())
  emulatorId   String
  name         String // Internal name, e.g., "driver_version"
  label        String // UI display label, e.g., "Driver Version"
  type         CustomFieldType
  options      Json? // For SELECT type: [{ value: "v1", label: "Version 1" }, { value: "v2", label: "Version 2" }]
  isRequired   Boolean           @default(false)
  displayOrder Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  emulator     Emulator          @relation(fields: [emulatorId], references: [id])
  listingValues ListingCustomFieldValue[]

  @@unique([emulatorId, name])
  @@index([emulatorId])
}

model CustomFieldTemplate {
  id          String                     @id @default(uuid())
  name        String                     @unique
  description String?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  fields      CustomFieldTemplateField[]
}

model CustomFieldTemplateField {
  id           String              @id @default(uuid())
  templateId   String
  name         String              // Internal name, e.g., "driver_version"
  label        String              // UI display label, e.g., "Driver Version"
  type         CustomFieldType
  options      Json?               // For SELECT type: [{ value: "v1", label: "Version 1" }, { value: "v2", label: "Version 2" }]
  isRequired   Boolean             @default(false)
  displayOrder Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  template     CustomFieldTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, name])
  @@index([templateId])
}

model Emulator {
  id                    String                  @id @default(uuid())
  name                  String                  @unique
  logo                  String?                 // Logo filename (e.g., "aethersx2.png")
  listings              Listing[]
  customFieldDefinitions CustomFieldDefinition[]
  systems               System[]
}

model PerformanceScale {
  id          Int       @id @default(autoincrement())
  label       String    @unique
  rank        Int
  description String?
  listings    Listing[]
}

model Listing {
  id              String                 @id @default(uuid())
  deviceId        String
  gameId          String
  emulatorId      String
  performanceId   Int
  notes           String?
  authorId        String
  createdAt       DateTime               @default(now())
  status          ApprovalStatus  @default(PENDING)
  processedAt     DateTime?
  processedNotes  String?
  processedByUserId String?

  author          User                   @relation(fields: [authorId], references: [id])
  processedByUser User?                  @relation("ListingsProcessedByAdmin", fields: [processedByUserId], references: [id])
  performance     PerformanceScale       @relation(fields: [performanceId], references: [id])
  emulator        Emulator               @relation(fields: [emulatorId], references: [id])
  game            Game                   @relation(fields: [gameId], references: [id])
  device          Device                 @relation(fields: [deviceId], references: [id])
  comments              Comment[]
  votes                 Vote[]
  customFieldValues     ListingCustomFieldValue[]
  notificationPrefs     ListingNotificationPreference[]

  @@unique([gameId, deviceId, emulatorId])
  @@index([processedByUserId])
}

model Vote {
  id        String  @id @default(uuid())
  value     Boolean
  userId    String
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  userId    String
  listingId String
  parentId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  isEdited  Boolean       @default(false)
  parent    Comment?      @relation("Thread", fields: [parentId], references: [id])
  replies   Comment[]     @relation("Thread")
  listing   Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     CommentVote[]
  score     Int           @default(0)
}

model CommentVote {
  id        String   @id @default(uuid())
  value     Boolean // true = upvote, false = downvote
  userId    String
  commentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ListingCustomFieldValue {
  id                      String                @id @default(uuid())
  listingId               String
  customFieldDefinitionId String
  value                   Json
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  listing                 Listing               @relation(fields: [listingId], references: [id], onDelete: Cascade)
  customFieldDefinition   CustomFieldDefinition @relation(fields: [customFieldDefinitionId], references: [id], onDelete: Cascade)

  @@unique([listingId, customFieldDefinitionId])
  @@index([listingId])
  @@index([customFieldDefinitionId])
}

// Notification System Models
model Notification {
  id              String                 @id @default(cuid())
  userId          String
  type            NotificationType
  category        NotificationCategory
  title           String                 @db.VarChar(255)
  message         String                 @db.Text
  actionUrl       String?
  metadata        Json?
  isRead          Boolean                @default(false)
  deliveryChannel DeliveryChannel        @default(IN_APP)
  deliveryStatus  NotificationDeliveryStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id           String           @id @default(cuid())
  userId       String
  type         NotificationType
  inAppEnabled Boolean          @default(true)
  emailEnabled Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("notification_preferences")
}

model ListingNotificationPreference {
  id        String  @id @default(cuid())
  userId    String
  listingId String
  isEnabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("listing_notification_preferences")
}

model NotificationEvent {
  id           String    @id @default(cuid())
  eventType    String
  entityType   String
  entityId     String
  triggeredBy  String?
  payload      Json?
  processedAt  DateTime?

  createdAt DateTime @default(now())

  triggeredByUser User? @relation(fields: [triggeredBy], references: [id], onDelete: SetNull)

  @@index([eventType, createdAt])
  @@index([entityType, entityId])
  @@map("notification_events")
}

// Notification Enums
enum NotificationType {
  // Engagement notifications
  LISTING_COMMENT
  LISTING_VOTE_UP
  LISTING_VOTE_DOWN
  COMMENT_REPLY
  USER_MENTION

  // Content notifications
  NEW_DEVICE_LISTING
  NEW_SOC_LISTING
  GAME_ADDED
  EMULATOR_UPDATED

  // System notifications
  MAINTENANCE_NOTICE
  FEATURE_ANNOUNCEMENT
  POLICY_UPDATE

  // Moderation notifications
  LISTING_APPROVED
  LISTING_REJECTED
  CONTENT_FLAGGED
  ACCOUNT_WARNING

  @@map("notification_type")
}

enum NotificationCategory {
  ENGAGEMENT
  CONTENT
  SYSTEM
  MODERATION

  @@map("notification_category")
}

enum DeliveryChannel {
  IN_APP
  EMAIL
  BOTH

  @@map("delivery_channel")
}

enum NotificationDeliveryStatus {
  PENDING
  SENT
  FAILED

  @@map("notification_delivery_status")
}
